# Generated by ariadne-codegen on 2023-06-06 10:49
# Source: graphql/queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetSingleCompetitorSeasonBests(BaseModel):
    get_single_competitor_season_bests: Optional[
        "GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBests"
    ] = Field(alias="getSingleCompetitorSeasonBests")


class GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBests(BaseModel):
    parameters: Optional[
        "GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsParameters"
    ]
    active_seasons: Optional[List[Optional[str]]] = Field(alias="activeSeasons")
    with_wind: Optional[bool] = Field(alias="withWind")
    with_records: Optional[bool] = Field(alias="withRecords")
    results: Optional[
        List[
            Optional[
                "GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsResults"
            ]
        ]
    ]


class GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsParameters(BaseModel):
    seasons_bests_season: Optional[int] = Field(alias="seasonsBestsSeason")


class GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsResults(BaseModel):
    indoor: Optional[bool]
    discipline_code: Optional[str] = Field(alias="disciplineCode")
    discipline_name_url_slug: Optional[str] = Field(alias="disciplineNameUrlSlug")
    type_name_url_slug: Optional[str] = Field(alias="typeNameUrlSlug")
    discipline: Optional[str]
    link_to_list: Optional[bool] = Field(alias="linkToList")
    mark: Optional[str]
    combined_performances: Optional[str] = Field(alias="combinedPerformances")
    wind: Optional[str]
    not_legal: Optional[bool] = Field(alias="notLegal")
    venue: Optional[str]
    date: Optional[str]
    list_position: Optional[str] = Field(alias="listPosition")
    result_score: Optional[int] = Field(alias="resultScore")
    records: Optional[List[Optional[str]]]


GetSingleCompetitorSeasonBests.update_forward_refs()
GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBests.update_forward_refs()
GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsParameters.update_forward_refs()
GetSingleCompetitorSeasonBestsGetSingleCompetitorSeasonBestsResults.update_forward_refs()
