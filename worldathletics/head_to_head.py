# Generated by ariadne-codegen
# Source: graphql/queries.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel


class HeadToHead(BaseModel):
    head_to_head: Optional["HeadToHeadHeadToHead"] = Field(alias="headToHead")


class HeadToHeadHeadToHead(BaseModel):
    disciplines: Optional[List[Optional["HeadToHeadHeadToHeadDisciplines"]]]
    opponents: Optional[List[Optional["HeadToHeadHeadToHeadOpponents"]]]
    parameters: Optional["HeadToHeadHeadToHeadParameters"]
    results: Optional["HeadToHeadHeadToHeadResults"]


class HeadToHeadHeadToHeadDisciplines(BaseModel):
    id: Optional[str]
    name: Optional[str]


class HeadToHeadHeadToHeadOpponents(BaseModel):
    birth_date: Optional[str] = Field(alias="birthDate")
    country: Optional[str]
    family_name: Optional[str] = Field(alias="familyName")
    gender: Optional[str]
    given_name: Optional[str] = Field(alias="givenName")
    id: Optional[int]


class HeadToHeadHeadToHeadParameters(BaseModel):
    head_to_head_discipline: Optional[str] = Field(alias="headToHeadDiscipline")
    head_to_head_end_date: Optional[str] = Field(alias="headToHeadEndDate")
    head_to_head_final_only: Optional[bool] = Field(alias="headToHeadFinalOnly")
    head_to_head_opponent: Optional[int] = Field(alias="headToHeadOpponent")
    head_to_head_start_date: Optional[str] = Field(alias="headToHeadStartDate")


class HeadToHeadHeadToHeadResults(BaseModel):
    athlete_1_wins: Optional[int] = Field(alias="athlete1Wins")
    athlete_2_wins: Optional[int] = Field(alias="athlete2Wins")
    results: Optional[List[Optional["HeadToHeadHeadToHeadResultsResults"]]]


class HeadToHeadHeadToHeadResultsResults(BaseModel):
    athlete_1_wins: Optional[bool] = Field(alias="athlete1Wins")
    athlete_2_wins: Optional[bool] = Field(alias="athlete2Wins")
    competition: Optional[str]
    date: Optional[str]
    discipline: Optional[str]
    place_1: Optional[str] = Field(alias="place1")
    place_2: Optional[str] = Field(alias="place2")
    race: Optional[str]
    race_type: Optional[str] = Field(alias="raceType")
    result_1: Optional[str] = Field(alias="result1")
    result_2: Optional[str] = Field(alias="result2")


HeadToHead.model_rebuild()
HeadToHeadHeadToHead.model_rebuild()
HeadToHeadHeadToHeadResults.model_rebuild()
